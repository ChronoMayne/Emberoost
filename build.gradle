buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies { classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true }
}

repositories {
    maven {
        // location of the maven that hosts JEI API
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

group = 'WolfShotz.Wyrmroost' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
String modState = (project.mod_state != "RELEASE"? " [${project.mod_state}] " : "-")
archivesBaseName = "${project.archiveBaseName}" + modState + "${project.mc_version}"
version = "${project.mod_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main.resources.srcDirs += 'src/main/generated_resources'
}

minecraft {
    mappings channel: project.mcp_channel, version: "${project.mcp_mappings}-${project.mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')
            
            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }
        server {
            workingDirectory project.file('run')

            ideaModule "${project.name}.main"
            environment 'MOD_CLASSES', "${project.file("out/production/resources").canonicalPath};${project.file("out/production/classes").canonicalPath}"
        }
        data {
            workingDirectory project.file('run')

            ideaModule "${project.name}.main"
            args '--mod', 'wyrmroost', '--all', '--output', file('src/main/generated_resources/'), '--existing', file('src/main/resources/')
        }
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Wyrmroost",
            "Specification-Vendor": "WolfShotz",
            "Specification-Version": project.version,
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.mod_version}",
            "Implementation-Vendor" :"WolfShotz",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

/*
  Example configuration to allow publishing using the maven-publish task
  we define a custom artifact that is sourced from the reobfJar output task
  and then declare that to be published
  Note you'll need to add a repository here
*/
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications { mavenJava(MavenPublication) { artifact reobfArtifact } }
    repositories { maven { url "file:///${project.projectDir}/mcmodsrepo" } }
}